// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `MSK.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <MSK.h>
#include <IceUtil/PushDisableWarnings.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/PopDisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 306
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __RoboCompMSKRGBD__MSKRGBDEvent__newRGBImageAvailable_name = "newRGBImageAvailable";

const ::std::string __RoboCompMSKRGBD__MSKRGBDEvent__newDepthImageAvailable_name = "newDepthImageAvailable";

const ::std::string __RoboCompMSKRGBD__MSKRGBD__getRGBImage_name = "getRGBImage";

const ::std::string __RoboCompMSKRGBD__MSKRGBD__getDepthImage_name = "getDepthImage";

}

namespace
{

const ::std::string __RoboCompMSKBody__MSKBodyEvent__newMSKBodyEvent_name = "newMSKBodyEvent";

}

namespace
{

const ::std::string __RoboCompMSKFace__MSKFaceEvent__newFaceAvailable_name = "newFaceAvailable";

}

namespace
{

const ::std::string __RoboCompMSKASR__MSKASREvent__newSentenceAvailable_name = "newSentenceAvailable";

const ::std::string __RoboCompMSKASR__MSKASRConfig__setTestConfig_name = "setTestConfig";

const ::std::string __RoboCompMSKASR__MSKASRConfig__setTestQuestion_name = "setTestQuestion";

}

namespace Ice
{
}

namespace Ice
{
}

namespace Ice
{
}

namespace Ice
{
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompMSKRGBD::upCast(::IceProxy::RoboCompMSKRGBD::MSKRGBDEvent* p) { return p; }

void
::IceProxy::RoboCompMSKRGBD::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompMSKRGBD::MSKRGBDEvent>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompMSKRGBD::MSKRGBDEvent;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompMSKRGBD::MSKRGBDEvent::newRGBImageAvailable(const ::RoboCompMSKRGBD::TRGBImage& __p_RGBImage, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __RoboCompMSKRGBD__MSKRGBDEvent__newRGBImageAvailable_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_RGBImage);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompMSKRGBD::MSKRGBDEvent::begin_newRGBImageAvailable(const ::RoboCompMSKRGBD::TRGBImage& __p_RGBImage, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompMSKRGBD__MSKRGBDEvent__newRGBImageAvailable_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompMSKRGBD__MSKRGBDEvent__newRGBImageAvailable_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_RGBImage);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompMSKRGBD::MSKRGBDEvent::end_newRGBImageAvailable(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompMSKRGBD__MSKRGBDEvent__newRGBImageAvailable_name);
}

void
IceProxy::RoboCompMSKRGBD::MSKRGBDEvent::newDepthImageAvailable(const ::RoboCompMSKRGBD::TDepthImage& __p_depthImage, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __RoboCompMSKRGBD__MSKRGBDEvent__newDepthImageAvailable_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_depthImage);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompMSKRGBD::MSKRGBDEvent::begin_newDepthImageAvailable(const ::RoboCompMSKRGBD::TDepthImage& __p_depthImage, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompMSKRGBD__MSKRGBDEvent__newDepthImageAvailable_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompMSKRGBD__MSKRGBDEvent__newDepthImageAvailable_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_depthImage);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompMSKRGBD::MSKRGBDEvent::end_newDepthImageAvailable(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompMSKRGBD__MSKRGBDEvent__newDepthImageAvailable_name);
}

const ::std::string&
IceProxy::RoboCompMSKRGBD::MSKRGBDEvent::ice_staticId()
{
    return ::RoboCompMSKRGBD::MSKRGBDEvent::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::RoboCompMSKRGBD::MSKRGBDEvent::__newInstance() const
{
    return new MSKRGBDEvent;
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompMSKRGBD::upCast(::IceProxy::RoboCompMSKRGBD::MSKRGBD* p) { return p; }

void
::IceProxy::RoboCompMSKRGBD::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompMSKRGBD::MSKRGBD>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompMSKRGBD::MSKRGBD;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompMSKRGBD::MSKRGBD::getRGBImage(::RoboCompMSKRGBD::TRGBImage& __p_RGBImage, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompMSKRGBD__MSKRGBD__getRGBImage_name);
    ::IceInternal::Outgoing __og(this, __RoboCompMSKRGBD__MSKRGBD__getRGBImage_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_RGBImage);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompMSKRGBD::MSKRGBD::begin_getRGBImage(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompMSKRGBD__MSKRGBD__getRGBImage_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompMSKRGBD__MSKRGBD__getRGBImage_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompMSKRGBD__MSKRGBD__getRGBImage_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompMSKRGBD::MSKRGBD::__begin_getRGBImage(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompMSKRGBD::TRGBImage&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompMSKRGBD::TRGBImage&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompMSKRGBD::MSKRGBDPrx __proxy = ::RoboCompMSKRGBD::MSKRGBDPrx::uncheckedCast(__result->getProxy());
            ::RoboCompMSKRGBD::TRGBImage __p_RGBImage;
            try
            {
                __proxy->end_getRGBImage(__p_RGBImage, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_RGBImage);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompMSKRGBD::TRGBImage&)> _response;
    };
    return begin_getRGBImage(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompMSKRGBD::MSKRGBD::end_getRGBImage(::RoboCompMSKRGBD::TRGBImage& __p_RGBImage, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompMSKRGBD__MSKRGBD__getRGBImage_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_RGBImage);
    __result->__endReadParams();
}

void
IceProxy::RoboCompMSKRGBD::MSKRGBD::getDepthImage(::RoboCompMSKRGBD::TDepthImage& __p_depthImage, const ::Ice::Context* __ctx)
{
    __checkTwowayOnly(__RoboCompMSKRGBD__MSKRGBD__getDepthImage_name);
    ::IceInternal::Outgoing __og(this, __RoboCompMSKRGBD__MSKRGBD__getDepthImage_name, ::Ice::Normal, __ctx);
    __og.writeEmptyParams();
    if(!__og.invoke())
    {
        try
        {
            __og.throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
            throw __uue;
        }
    }
    ::IceInternal::BasicStream* __is = __og.startReadParams();
    __is->read(__p_depthImage);
    __og.endReadParams();
}

::Ice::AsyncResultPtr
IceProxy::RoboCompMSKRGBD::MSKRGBD::begin_getDepthImage(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__RoboCompMSKRGBD__MSKRGBD__getDepthImage_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompMSKRGBD__MSKRGBD__getDepthImage_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompMSKRGBD__MSKRGBD__getDepthImage_name, ::Ice::Normal, __ctx);
        __result->writeEmptyParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

#ifdef ICE_CPP11

::Ice::AsyncResultPtr
IceProxy::RoboCompMSKRGBD::MSKRGBD::__begin_getDepthImage(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::RoboCompMSKRGBD::TDepthImage&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
{
    class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
    {
    public:

        Cpp11CB(const ::std::function<void (const ::RoboCompMSKRGBD::TDepthImage&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
            ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
            _response(responseFunc)
        {
            CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
        }

        virtual void completed(const ::Ice::AsyncResultPtr& __result) const
        {
            ::RoboCompMSKRGBD::MSKRGBDPrx __proxy = ::RoboCompMSKRGBD::MSKRGBDPrx::uncheckedCast(__result->getProxy());
            ::RoboCompMSKRGBD::TDepthImage __p_depthImage;
            try
            {
                __proxy->end_getDepthImage(__p_depthImage, __result);
            }
            catch(const ::Ice::Exception& ex)
            {
                Cpp11FnCallbackNC::exception(__result, ex);
                return;
            }
            if(_response != nullptr)
            {
                _response(__p_depthImage);
            }
        }
    
    private:
        
        ::std::function<void (const ::RoboCompMSKRGBD::TDepthImage&)> _response;
    };
    return begin_getDepthImage(__ctx, new Cpp11CB(__response, __exception, __sent));
}
#endif

void
IceProxy::RoboCompMSKRGBD::MSKRGBD::end_getDepthImage(::RoboCompMSKRGBD::TDepthImage& __p_depthImage, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __RoboCompMSKRGBD__MSKRGBD__getDepthImage_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__p_depthImage);
    __result->__endReadParams();
}

const ::std::string&
IceProxy::RoboCompMSKRGBD::MSKRGBD::ice_staticId()
{
    return ::RoboCompMSKRGBD::MSKRGBD::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::RoboCompMSKRGBD::MSKRGBD::__newInstance() const
{
    return new MSKRGBD;
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompMSKBody::upCast(::IceProxy::RoboCompMSKBody::MSKBodyEvent* p) { return p; }

void
::IceProxy::RoboCompMSKBody::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompMSKBody::MSKBodyEvent>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompMSKBody::MSKBodyEvent;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompMSKBody::MSKBodyEvent::newMSKBodyEvent(const ::RoboCompMSKBody::PersonList& __p_people, ::Ice::Long __p_timestamp, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __RoboCompMSKBody__MSKBodyEvent__newMSKBodyEvent_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_people);
        __os->write(__p_timestamp);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompMSKBody::MSKBodyEvent::begin_newMSKBodyEvent(const ::RoboCompMSKBody::PersonList& __p_people, ::Ice::Long __p_timestamp, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompMSKBody__MSKBodyEvent__newMSKBodyEvent_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompMSKBody__MSKBodyEvent__newMSKBodyEvent_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_people);
        __os->write(__p_timestamp);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompMSKBody::MSKBodyEvent::end_newMSKBodyEvent(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompMSKBody__MSKBodyEvent__newMSKBodyEvent_name);
}

const ::std::string&
IceProxy::RoboCompMSKBody::MSKBodyEvent::ice_staticId()
{
    return ::RoboCompMSKBody::MSKBodyEvent::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::RoboCompMSKBody::MSKBodyEvent::__newInstance() const
{
    return new MSKBodyEvent;
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompMSKFace::upCast(::IceProxy::RoboCompMSKFace::MSKFaceEvent* p) { return p; }

void
::IceProxy::RoboCompMSKFace::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompMSKFace::MSKFaceEvent>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompMSKFace::MSKFaceEvent;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompMSKFace::MSKFaceEvent::newFaceAvailable(const ::RoboCompMSKFace::DetailedFaceMap& __p_face, ::Ice::Long __p_timestamp, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __RoboCompMSKFace__MSKFaceEvent__newFaceAvailable_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_face);
        __os->write(__p_timestamp);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompMSKFace::MSKFaceEvent::begin_newFaceAvailable(const ::RoboCompMSKFace::DetailedFaceMap& __p_face, ::Ice::Long __p_timestamp, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompMSKFace__MSKFaceEvent__newFaceAvailable_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompMSKFace__MSKFaceEvent__newFaceAvailable_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_face);
        __os->write(__p_timestamp);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompMSKFace::MSKFaceEvent::end_newFaceAvailable(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompMSKFace__MSKFaceEvent__newFaceAvailable_name);
}

const ::std::string&
IceProxy::RoboCompMSKFace::MSKFaceEvent::ice_staticId()
{
    return ::RoboCompMSKFace::MSKFaceEvent::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::RoboCompMSKFace::MSKFaceEvent::__newInstance() const
{
    return new MSKFaceEvent;
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompMSKASR::upCast(::IceProxy::RoboCompMSKASR::MSKASREvent* p) { return p; }

void
::IceProxy::RoboCompMSKASR::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompMSKASR::MSKASREvent>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompMSKASR::MSKASREvent;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompMSKASR::MSKASREvent::newSentenceAvailable(const ::RoboCompMSKASR::TSentence& __p_sentence, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __RoboCompMSKASR__MSKASREvent__newSentenceAvailable_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_sentence);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompMSKASR::MSKASREvent::begin_newSentenceAvailable(const ::RoboCompMSKASR::TSentence& __p_sentence, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompMSKASR__MSKASREvent__newSentenceAvailable_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompMSKASR__MSKASREvent__newSentenceAvailable_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_sentence);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompMSKASR::MSKASREvent::end_newSentenceAvailable(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompMSKASR__MSKASREvent__newSentenceAvailable_name);
}

const ::std::string&
IceProxy::RoboCompMSKASR::MSKASREvent::ice_staticId()
{
    return ::RoboCompMSKASR::MSKASREvent::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::RoboCompMSKASR::MSKASREvent::__newInstance() const
{
    return new MSKASREvent;
}
::IceProxy::Ice::Object* ::IceProxy::RoboCompMSKASR::upCast(::IceProxy::RoboCompMSKASR::MSKASRConfig* p) { return p; }

void
::IceProxy::RoboCompMSKASR::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::RoboCompMSKASR::MSKASRConfig>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::RoboCompMSKASR::MSKASRConfig;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::RoboCompMSKASR::MSKASRConfig::setTestConfig(const ::RoboCompMSKASR::TestConfig& __p_config, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __RoboCompMSKASR__MSKASRConfig__setTestConfig_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_config);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompMSKASR::MSKASRConfig::begin_setTestConfig(const ::RoboCompMSKASR::TestConfig& __p_config, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompMSKASR__MSKASRConfig__setTestConfig_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompMSKASR__MSKASRConfig__setTestConfig_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_config);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompMSKASR::MSKASRConfig::end_setTestConfig(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompMSKASR__MSKASRConfig__setTestConfig_name);
}

void
IceProxy::RoboCompMSKASR::MSKASRConfig::setTestQuestion(::Ice::Int __p_questionNumber, const ::Ice::Context* __ctx)
{
    ::IceInternal::Outgoing __og(this, __RoboCompMSKASR__MSKASRConfig__setTestQuestion_name, ::Ice::Normal, __ctx);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_questionNumber);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    __invoke(__og);
}

::Ice::AsyncResultPtr
IceProxy::RoboCompMSKASR::MSKASRConfig::begin_setTestQuestion(::Ice::Int __p_questionNumber, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __RoboCompMSKASR__MSKASRConfig__setTestQuestion_name, __del, __cookie);
    try
    {
        __result->prepare(__RoboCompMSKASR__MSKASRConfig__setTestQuestion_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->startWriteParams(::Ice::DefaultFormat);
        __os->write(__p_questionNumber);
        __result->endWriteParams();
        __result->invoke();
    }
    catch(const ::Ice::Exception& __ex)
    {
        __result->abort(__ex);
    }
    return __result;
}

void
IceProxy::RoboCompMSKASR::MSKASRConfig::end_setTestQuestion(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __RoboCompMSKASR__MSKASRConfig__setTestQuestion_name);
}

const ::std::string&
IceProxy::RoboCompMSKASR::MSKASRConfig::ice_staticId()
{
    return ::RoboCompMSKASR::MSKASRConfig::ice_staticId();
}

::IceProxy::Ice::Object*
IceProxy::RoboCompMSKASR::MSKASRConfig::__newInstance() const
{
    return new MSKASRConfig;
}

::Ice::Object* RoboCompMSKRGBD::upCast(::RoboCompMSKRGBD::MSKRGBDEvent* p) { return p; }

namespace
{
const ::std::string __RoboCompMSKRGBD__MSKRGBDEvent_ids[2] =
{
    "::Ice::Object",
    "::RoboCompMSKRGBD::MSKRGBDEvent"
};

}

bool
RoboCompMSKRGBD::MSKRGBDEvent::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompMSKRGBD__MSKRGBDEvent_ids, __RoboCompMSKRGBD__MSKRGBDEvent_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompMSKRGBD::MSKRGBDEvent::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompMSKRGBD__MSKRGBDEvent_ids[0], &__RoboCompMSKRGBD__MSKRGBDEvent_ids[2]);
}

const ::std::string&
RoboCompMSKRGBD::MSKRGBDEvent::ice_id(const ::Ice::Current&) const
{
    return __RoboCompMSKRGBD__MSKRGBDEvent_ids[1];
}

const ::std::string&
RoboCompMSKRGBD::MSKRGBDEvent::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompMSKRGBD::MSKRGBDEvent";
    return typeId;
#else
    return __RoboCompMSKRGBD__MSKRGBDEvent_ids[1];
#endif
}

::Ice::DispatchStatus
RoboCompMSKRGBD::MSKRGBDEvent::___newRGBImageAvailable(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompMSKRGBD::TRGBImage __p_RGBImage;
    __is->read(__p_RGBImage);
    __inS.endReadParams();
    newRGBImageAvailable(__p_RGBImage, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompMSKRGBD::MSKRGBDEvent::___newDepthImageAvailable(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompMSKRGBD::TDepthImage __p_depthImage;
    __is->read(__p_depthImage);
    __inS.endReadParams();
    newDepthImageAvailable(__p_depthImage, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompMSKRGBD__MSKRGBDEvent_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "newDepthImageAvailable",
    "newRGBImageAvailable"
};

}

::Ice::DispatchStatus
RoboCompMSKRGBD::MSKRGBDEvent::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompMSKRGBD__MSKRGBDEvent_all, __RoboCompMSKRGBD__MSKRGBDEvent_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompMSKRGBD__MSKRGBDEvent_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___newDepthImageAvailable(in, current);
        }
        case 5:
        {
            return ___newRGBImageAvailable(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompMSKRGBD::MSKRGBDEvent::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompMSKRGBD::MSKRGBDEvent::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompMSKRGBD::__patch(MSKRGBDEventPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompMSKRGBD::MSKRGBDEventPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompMSKRGBD::MSKRGBDEvent::ice_staticId(), v);
    }
}

::Ice::Object* RoboCompMSKRGBD::upCast(::RoboCompMSKRGBD::MSKRGBD* p) { return p; }

namespace
{
const ::std::string __RoboCompMSKRGBD__MSKRGBD_ids[2] =
{
    "::Ice::Object",
    "::RoboCompMSKRGBD::MSKRGBD"
};

}

bool
RoboCompMSKRGBD::MSKRGBD::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompMSKRGBD__MSKRGBD_ids, __RoboCompMSKRGBD__MSKRGBD_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompMSKRGBD::MSKRGBD::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompMSKRGBD__MSKRGBD_ids[0], &__RoboCompMSKRGBD__MSKRGBD_ids[2]);
}

const ::std::string&
RoboCompMSKRGBD::MSKRGBD::ice_id(const ::Ice::Current&) const
{
    return __RoboCompMSKRGBD__MSKRGBD_ids[1];
}

const ::std::string&
RoboCompMSKRGBD::MSKRGBD::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompMSKRGBD::MSKRGBD";
    return typeId;
#else
    return __RoboCompMSKRGBD__MSKRGBD_ids[1];
#endif
}

::Ice::DispatchStatus
RoboCompMSKRGBD::MSKRGBD::___getRGBImage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompMSKRGBD::TRGBImage __p_RGBImage;
    getRGBImage(__p_RGBImage, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_RGBImage);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompMSKRGBD::MSKRGBD::___getDepthImage(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::RoboCompMSKRGBD::TDepthImage __p_depthImage;
    getDepthImage(__p_depthImage, __current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__p_depthImage);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompMSKRGBD__MSKRGBD_all[] =
{
    "getDepthImage",
    "getRGBImage",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
RoboCompMSKRGBD::MSKRGBD::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompMSKRGBD__MSKRGBD_all, __RoboCompMSKRGBD__MSKRGBD_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompMSKRGBD__MSKRGBD_all)
    {
        case 0:
        {
            return ___getDepthImage(in, current);
        }
        case 1:
        {
            return ___getRGBImage(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompMSKRGBD::MSKRGBD::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompMSKRGBD::MSKRGBD::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompMSKRGBD::__patch(MSKRGBDPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompMSKRGBD::MSKRGBDPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompMSKRGBD::MSKRGBD::ice_staticId(), v);
    }
}

::Ice::Object* RoboCompMSKBody::upCast(::RoboCompMSKBody::MSKBodyEvent* p) { return p; }

namespace
{
const ::std::string __RoboCompMSKBody__MSKBodyEvent_ids[2] =
{
    "::Ice::Object",
    "::RoboCompMSKBody::MSKBodyEvent"
};

}

bool
RoboCompMSKBody::MSKBodyEvent::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompMSKBody__MSKBodyEvent_ids, __RoboCompMSKBody__MSKBodyEvent_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompMSKBody::MSKBodyEvent::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompMSKBody__MSKBodyEvent_ids[0], &__RoboCompMSKBody__MSKBodyEvent_ids[2]);
}

const ::std::string&
RoboCompMSKBody::MSKBodyEvent::ice_id(const ::Ice::Current&) const
{
    return __RoboCompMSKBody__MSKBodyEvent_ids[1];
}

const ::std::string&
RoboCompMSKBody::MSKBodyEvent::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompMSKBody::MSKBodyEvent";
    return typeId;
#else
    return __RoboCompMSKBody__MSKBodyEvent_ids[1];
#endif
}

::Ice::DispatchStatus
RoboCompMSKBody::MSKBodyEvent::___newMSKBodyEvent(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompMSKBody::PersonList __p_people;
    ::Ice::Long __p_timestamp;
    __is->read(__p_people);
    __is->read(__p_timestamp);
    __inS.endReadParams();
    newMSKBodyEvent(__p_people, __p_timestamp, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompMSKBody__MSKBodyEvent_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "newMSKBodyEvent"
};

}

::Ice::DispatchStatus
RoboCompMSKBody::MSKBodyEvent::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompMSKBody__MSKBodyEvent_all, __RoboCompMSKBody__MSKBodyEvent_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompMSKBody__MSKBodyEvent_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___newMSKBodyEvent(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompMSKBody::MSKBodyEvent::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompMSKBody::MSKBodyEvent::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompMSKBody::__patch(MSKBodyEventPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompMSKBody::MSKBodyEventPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompMSKBody::MSKBodyEvent::ice_staticId(), v);
    }
}

::Ice::Object* RoboCompMSKFace::upCast(::RoboCompMSKFace::MSKFaceEvent* p) { return p; }

namespace
{
const ::std::string __RoboCompMSKFace__MSKFaceEvent_ids[2] =
{
    "::Ice::Object",
    "::RoboCompMSKFace::MSKFaceEvent"
};

}

bool
RoboCompMSKFace::MSKFaceEvent::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompMSKFace__MSKFaceEvent_ids, __RoboCompMSKFace__MSKFaceEvent_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompMSKFace::MSKFaceEvent::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompMSKFace__MSKFaceEvent_ids[0], &__RoboCompMSKFace__MSKFaceEvent_ids[2]);
}

const ::std::string&
RoboCompMSKFace::MSKFaceEvent::ice_id(const ::Ice::Current&) const
{
    return __RoboCompMSKFace__MSKFaceEvent_ids[1];
}

const ::std::string&
RoboCompMSKFace::MSKFaceEvent::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompMSKFace::MSKFaceEvent";
    return typeId;
#else
    return __RoboCompMSKFace__MSKFaceEvent_ids[1];
#endif
}

::Ice::DispatchStatus
RoboCompMSKFace::MSKFaceEvent::___newFaceAvailable(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompMSKFace::DetailedFaceMap __p_face;
    ::Ice::Long __p_timestamp;
    __is->read(__p_face);
    __is->read(__p_timestamp);
    __inS.endReadParams();
    newFaceAvailable(__p_face, __p_timestamp, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompMSKFace__MSKFaceEvent_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "newFaceAvailable"
};

}

::Ice::DispatchStatus
RoboCompMSKFace::MSKFaceEvent::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompMSKFace__MSKFaceEvent_all, __RoboCompMSKFace__MSKFaceEvent_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompMSKFace__MSKFaceEvent_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___newFaceAvailable(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompMSKFace::MSKFaceEvent::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompMSKFace::MSKFaceEvent::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompMSKFace::__patch(MSKFaceEventPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompMSKFace::MSKFaceEventPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompMSKFace::MSKFaceEvent::ice_staticId(), v);
    }
}

::Ice::Object* RoboCompMSKASR::upCast(::RoboCompMSKASR::MSKASREvent* p) { return p; }

namespace
{
const ::std::string __RoboCompMSKASR__MSKASREvent_ids[2] =
{
    "::Ice::Object",
    "::RoboCompMSKASR::MSKASREvent"
};

}

bool
RoboCompMSKASR::MSKASREvent::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompMSKASR__MSKASREvent_ids, __RoboCompMSKASR__MSKASREvent_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompMSKASR::MSKASREvent::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompMSKASR__MSKASREvent_ids[0], &__RoboCompMSKASR__MSKASREvent_ids[2]);
}

const ::std::string&
RoboCompMSKASR::MSKASREvent::ice_id(const ::Ice::Current&) const
{
    return __RoboCompMSKASR__MSKASREvent_ids[1];
}

const ::std::string&
RoboCompMSKASR::MSKASREvent::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompMSKASR::MSKASREvent";
    return typeId;
#else
    return __RoboCompMSKASR__MSKASREvent_ids[1];
#endif
}

::Ice::DispatchStatus
RoboCompMSKASR::MSKASREvent::___newSentenceAvailable(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompMSKASR::TSentence __p_sentence;
    __is->read(__p_sentence);
    __inS.endReadParams();
    newSentenceAvailable(__p_sentence, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompMSKASR__MSKASREvent_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "newSentenceAvailable"
};

}

::Ice::DispatchStatus
RoboCompMSKASR::MSKASREvent::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompMSKASR__MSKASREvent_all, __RoboCompMSKASR__MSKASREvent_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompMSKASR__MSKASREvent_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___newSentenceAvailable(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompMSKASR::MSKASREvent::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompMSKASR::MSKASREvent::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompMSKASR::__patch(MSKASREventPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompMSKASR::MSKASREventPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompMSKASR::MSKASREvent::ice_staticId(), v);
    }
}

::Ice::Object* RoboCompMSKASR::upCast(::RoboCompMSKASR::MSKASRConfig* p) { return p; }

namespace
{
const ::std::string __RoboCompMSKASR__MSKASRConfig_ids[2] =
{
    "::Ice::Object",
    "::RoboCompMSKASR::MSKASRConfig"
};

}

bool
RoboCompMSKASR::MSKASRConfig::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__RoboCompMSKASR__MSKASRConfig_ids, __RoboCompMSKASR__MSKASRConfig_ids + 2, _s);
}

::std::vector< ::std::string>
RoboCompMSKASR::MSKASRConfig::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__RoboCompMSKASR__MSKASRConfig_ids[0], &__RoboCompMSKASR__MSKASRConfig_ids[2]);
}

const ::std::string&
RoboCompMSKASR::MSKASRConfig::ice_id(const ::Ice::Current&) const
{
    return __RoboCompMSKASR__MSKASRConfig_ids[1];
}

const ::std::string&
RoboCompMSKASR::MSKASRConfig::ice_staticId()
{
#ifdef ICE_HAS_THREAD_SAFE_LOCAL_STATIC
    static const ::std::string typeId = "::RoboCompMSKASR::MSKASRConfig";
    return typeId;
#else
    return __RoboCompMSKASR__MSKASRConfig_ids[1];
#endif
}

::Ice::DispatchStatus
RoboCompMSKASR::MSKASRConfig::___setTestConfig(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::RoboCompMSKASR::TestConfig __p_config;
    __is->read(__p_config);
    __inS.endReadParams();
    setTestConfig(__p_config, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
RoboCompMSKASR::MSKASRConfig::___setTestQuestion(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int __p_questionNumber;
    __is->read(__p_questionNumber);
    __inS.endReadParams();
    setTestQuestion(__p_questionNumber, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __RoboCompMSKASR__MSKASRConfig_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "setTestConfig",
    "setTestQuestion"
};

}

::Ice::DispatchStatus
RoboCompMSKASR::MSKASRConfig::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__RoboCompMSKASR__MSKASRConfig_all, __RoboCompMSKASR__MSKASRConfig_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __RoboCompMSKASR__MSKASRConfig_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___setTestConfig(in, current);
        }
        case 5:
        {
            return ___setTestQuestion(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
RoboCompMSKASR::MSKASRConfig::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
RoboCompMSKASR::MSKASRConfig::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void 
RoboCompMSKASR::__patch(MSKASRConfigPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::RoboCompMSKASR::MSKASRConfigPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::RoboCompMSKASR::MSKASRConfig::ice_staticId(), v);
    }
}
